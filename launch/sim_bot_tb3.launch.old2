<launch>
  <arg name="model" default="waffle" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="set_map_frame"  default="map"/>
  <arg name="open_rviz" default="false"/>
  <arg name="move_forward_only" default="false"/>
  <arg name="initial_pose_x" default="-1.8949996233"/>
  <arg name="initial_pose_y" default="-0.419999837875"/>
  <arg name="initial_pose_a" default="-0.0208304"/>
  <arg name="robot_name" default="tb3_999"/>
  
  <arg name="set_base_frame" value="$(arg robot_name)/base_footprint"/>
  <arg name="set_odom_frame" value="$(arg robot_name)/odom"/>
  <arg name="set_scan_frame" value="$(arg robot_name)/base_scan"/>
    
  <arg name="cmd_vel_topic" value="/$(arg robot_name)/cmd_vel"/>
  <arg name="odom_topic" value="/$(arg robot_name)/odom"/>
  <arg name="scan_topic" value="/$(arg robot_name)/scan"/>

  <arg name="set_lidar_frame_id" value="/$(arg set_scan_frame)"/>

  <arg name="slam_methods" default="gmapping" doc="slam type [gmapping, cartographer, hector, karto, frontier_exploration]"/>
  <arg name="configuration_basename" default="turtlebot3_lds_2d.lua"/>

  <arg name="tb3_0_prefix" value="$(arg robot_name)"/>
  <group ns="$(arg tb3_0_prefix)">

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="prefix_tf_with" value="$(arg tb3_0_prefix)/"/>
      <param name="tf_prefix" value="$(arg tb3_0_prefix)/"/>
    </node>

    <!-- AMCL -->
    <node pkg="amcl" type="amcl" name="amcl">
      <param name="min_particles"             value="500"/>
      <param name="max_particles"             value="3000"/>
      <param name="kld_err"                   value="0.02"/>
      <param name="update_min_d"              value="0.20"/>
      <param name="update_min_a"              value="0.20"/>
      <param name="resample_interval"         value="1"/>
      <param name="transform_tolerance"       value="0.5"/>
      <param name="recovery_alpha_slow"       value="0.00"/>
      <param name="recovery_alpha_fast"       value="0.00"/>
      <param name="initial_pose_x"            value="$(arg initial_pose_x)"/>
      <param name="initial_pose_y"            value="$(arg initial_pose_y)"/>
      <param name="initial_pose_a"            value="$(arg initial_pose_a)"/>
      <param name="gui_publish_rate"          value="50.0"/>

      <remap from="scan"                      to="$(arg scan_topic)"/>
      <param name="laser_max_range"           value="3.5"/>
      <param name="laser_max_beams"           value="180"/>
      <param name="laser_z_hit"               value="0.5"/>
      <param name="laser_z_short"             value="0.05"/>
      <param name="laser_z_max"               value="0.05"/>
      <param name="laser_z_rand"              value="0.5"/>
      <param name="laser_sigma_hit"           value="0.2"/>
      <param name="laser_lambda_short"        value="0.1"/>
      <param name="laser_likelihood_max_dist" value="2.0"/>
      <param name="laser_model_type"          value="likelihood_field"/>

      <param name="odom_model_type"           value="diff"/>
      <param name="odom_alpha1"               value="0.1"/>
      <param name="odom_alpha2"               value="0.1"/>
      <param name="odom_alpha3"               value="0.1"/>
      <param name="odom_alpha4"               value="0.1"/>
      <param name="odom_frame_id"             value="$(arg set_odom_frame)"/>
      <param name="base_frame_id"             value="$(arg set_base_frame)"/>
      <param name="global_frame_id"           value="$(arg set_map_frame)"/>

      <remap from="map" to="/map"/>
      <remap from="static_map" to="/static_map"/>
    </node>

    <!-- move_base -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
      <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
      <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
      <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
      <remap from="odom" to="$(arg odom_topic)"/>
      <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
      
      <param name="local_costmap/scan/sensor_frame"   value="$(arg set_scan_frame)"/>
      <param name="local_costmap/global_frame"        value="$(arg set_odom_frame)"/>
      <param name="local_costmap/robot_base_frame"    value="$(arg set_base_frame)"/>
      <param name="global_costmap/scan/sensor_frame"  value="$(arg set_scan_frame)"/>
      <param name="global_costmap/global_frame"       value="$(arg set_map_frame)"/>
      <param name="global_costmap/robot_base_frame"   value="$(arg set_base_frame)"/>
      <remap from="map" to="/map"/>      
    </node>

    <!-- Gmapping -->
    <node pkg="gmapping" type="slam_gmapping" name="turtlebot3_slam_gmapping" output="screen">
      <param name="base_frame" value="$(arg set_base_frame)"/>
      <param name="odom_frame" value="$(arg set_odom_frame)"/>
      <param name="map_frame"  value="$(arg set_map_frame)"/>
      <rosparam command="load" file="$(find turtlebot3_slam)/config/gmapping_params.yaml" />
      <remap from="map" to="/map"/>
    </node>

    <include file="$(find turtlebot3_bringup)/launch/turtlebot3_lidar.launch">
      <arg name="set_frame_id" value="$(arg set_lidar_frame_id)"/>
    </include>

    <node pkg="turtlebot3_bringup" type="turtlebot3_diagnostics" name="turtlebot3_diagnostics" output="screen"/>

    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
    <node
      pkg="gazebo_ros" 
      type="spawn_model"
      name="spawn_urdf" 
      args="-param robot_description -x $(arg initial_pose_x) -y $(arg initial_pose_y) -Y $(arg initial_pose_a) -urdf -model $(arg tb3_0_prefix)">
    </node>

  </group>
</launch>
